#!groovy

pipeline {
  options {
    disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr: '3'))
  }
  agent any
  parameters {
    string(name: 'ART_URL', defaultValue: 'https://cae-artifactory.jpl.nasa.gov/artifactory',
           description: 'Artifactory URL.')
    string(name: 'ART_PATH', defaultValue: 'general-develop/gov/nasa/jpl/nisar/adt/',
           description: 'Root Artifactory path to publish artifacts to.')
    credentials(name: 'ART_CREDENTIALS',
                defaultValue: 'de922e18-54b3-48de-a263-e0001dbeea0c',
                description: 'ID of credentials containing Artifactory encrypted password that will allow for Artifactory uploads/downloads.',
                credentialType: 'com.cloudbees.plugins.credentials.impl.StringCredentialsImpl',
                required: true)
    credentials(name: 'GIT_OAUTH_TOKEN',
                defaultValue: '76f208dd-33bd-4a08-86d3-f0f38ddb95da',
                description: 'ID of Github-FN OAuth token.',
                credentialType: 'com.cloudbees.plugins.credentials.impl.StringCredentialsImpl',
                required: true)
  }
  stages {
    stage("Build ISCEv3 docker image") {
      agent any
      steps {
        //checkout ([
        //  $class: 'GitSCM',
        //  branches: [[name: '*/develop']],
        //  doGenerateSubmoduleConfigurations: false,
        //  extensions: [[$class: 'WipeWorkspace']],
        //  submoduleCfg: [],
        //  userRemoteConfigs: [[url: 'git@github-fn.jpl.nasa.gov:isce-3/isce.git']]
        //])

        echo "Build ISCEv3 docker image"
        echo "WORKSPACE: ${WORKSPACE}"
        withCredentials([string(credentialsId: params.GIT_OAUTH_TOKEN,
                                variable: 'git_oauth_token')]) {
          sh label: "Build ISCEv3 docker image", script: """
            GIT_OAUTH_TOKEN=$git_oauth_token
            bash .ci/jenkins/build-test-deploy/build.sh
          """
          stash includes: '.ci/images/centos/cppcheck.xml', name: 'cppcheck_file'
          stash includes: '.ci/images/centos/*.xml', name: 'ctest_files'
          stash includes: '.ci/images/centos/isce-3-*.tar.gz', name: 'isce_image'
        }
      }
    }
  }
  post {
    always {
      echo "Cleaning up workspace"
      deleteDir()

      echo "Publishing Cppcheck results"
      echo "WORKSPACE: ${WORKSPACE}"
      unstash 'cppcheck_file'
      publishCppcheck (
        pattern: ".ci/images/centos/cppcheck.xml",
        ignoreBlankFiles: true,
        allowNoReport: true
      )

      echo "Publishing xUnit test result report"
      unstash 'ctest_files'
      xunit (
        thresholds: [
          skipped (
            unstableThreshold: '0',
            unstableNewThreshold: '0'
          ),
          failed (
            unstableThreshold: '0',
            unstableNewThreshold: '0'
          )
        ],
        tools: [
          CTest (
            pattern: '.ci/images/centos/*.xml',
            skipNoTestFiles: false,
            failIfNotNew: true,
            deleteOutputFiles: true,
            stopProcessingIfError: true
          )
        ]
      )
    }
    success {
      echo 'I succeeeded!'
      echo "Configuring artifactory"
      unstash 'isce_image'
      rtServer (
        id: "ARTIFACTORY_SERVER",
        url: params.ART_URL,
        credentialsId: params.ART_CREDENTIALS,
        timeout: 300
      )
      echo "Publishing artifacts to ${params.ART_PATH}/"
      rtUpload (
        serverId: "ARTIFACTORY_SERVER",
        spec:
          """{
            "files": [
              {
                "pattern": ".ci/images/centos/isce-3-*.tar.gz",
                "target": "${params.ART_PATH}/"
              }
           ]
          }"""
      )
    }
    unstable {
      echo 'I am unstable :/'
    }
    failure {
      echo 'I failed :('
    }
    changed {
      echo 'Things were different before...'
    }
  }
}
