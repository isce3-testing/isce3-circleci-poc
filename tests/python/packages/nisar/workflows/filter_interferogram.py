import argparse
import os

import h5py
import iscetest
import numpy as np
from nisar.workflows import filter_interferogram, h5_prep
from nisar.workflows.filter_data import filter_data
from nisar.workflows.filter_interferogram_runconfig import \
    FilterInterferogramRunConfig
from osgeo import gdal
from scipy.signal import convolve2d


def test_filter_interferogram_run():
    """
    Check if insar_filtering runs without crashing
    """

    # Load yaml file
    test_yaml = os.path.join(iscetest.data, "insar_test.yaml")
    with open(test_yaml) as fh_test_yaml:
        test_yaml = (
            fh_test_yaml.read()
            .replace("@ISCETEST@", iscetest.data)
            .replace("@TEST_OUTPUT@", "RIFG.h5")
            .replace("@TEST_PRODUCT_TYPES@", "RIFG")
            .replace("interferogram_path:", "interferogram_path: RIFG.h5")
        )

    # Create CLI input namespace with yaml text instead of filepath
    args = argparse.Namespace(run_config_path=test_yaml, log_file=False)

    # Initialize runconfig object
    runconfig = FilterInterferogramRunConfig(args)
    runconfig.geocode_common_arg_load()

    out_paths = h5_prep.run(runconfig.cfg)

    # Modify the interferogram data to have something meaningful
    product_path = "/science/LSAR/RIFG/swaths/frequencyA/interferogram/HH"
    with h5py.File(out_paths["RIFG"], "a", libver="latest", swmr=True) as h_rifg:
        ds = h_rifg[os.path.join(product_path, "wrappedInterferogram")]
        nrows, ncols = ds.shape

        # Generate a ramp and add some noise
        x, y = np.meshgrid(np.arange(ncols), np.arange(nrows))
        igram = np.exp(1j * (x + y))
        h_rifg[os.path.join(product_path, "wrappedInterferogram")][:, :] = igram
        h_rifg.close()

    # Set interferogram_path for stand-alone usage of insar_filtering
    filter_interferogram.run(runconfig.cfg, out_paths["RIFG"])


def test_filter_interferogram_validate():
    """
    Validate the filtered interferogram generated by insar_filtering
    """

    scratch_path = "."
    product_path = "/science/LSAR/RIFG/swaths/frequencyA/interferogram/HH"

    with h5py.File(os.path.join(scratch_path, "RIFG.h5")) as h_rifg:
        # Check that the filtered interferogram still have 0 phase
        igram = h_rifg[os.path.join(product_path, "wrappedInterferogram")][()]

    # Re-create reference interferogram (prior to filtering)
    nrows, ncols = igram.shape
    x, y = np.meshgrid(np.arange(ncols), np.arange(nrows))
    ref_igram = np.exp(1j * (x + y))

    # Filter with boxcar 9x9 (see defaults/insar.yaml)
    filter_size_range = 9
    filter_size_azimuth = 9

    kernel = np.ones((filter_size_azimuth, filter_size_azimuth), dtype=np.float32) / (
        filter_size_azimuth * filter_size_range
    )

    filt_igram = convolve2d(ref_igram, kernel, mode="same")

    difference_abs = np.abs(igram - filt_igram)
    difference_phase = np.angle(igram * np.conj(filt_igram))

    assert difference_abs.max() < 1e-5
    assert difference_phase.max() < 1e-5


def test_filter_data_gdal():
    """
    Test stand-alone usage of filter_data.py on warped_envisat.slc.vrt
    """

    # Path to data to filter
    input_path = os.path.join(iscetest.data, "warped_winnipeg.slc.vrt")

    # kernel size along length and width
    kernel_length = 9
    kernel_width = 9

    # Extract HH SLCs and save it in array
    ds = gdal.Open(input_path, gdal.GA_ReadOnly)
    input_data = ds.GetRasterBand(1).ReadAsArray()
    ds = None

    # Filter using scipy.signal.convolve2d. Create 2D kernel
    kernel2d = np.ones((kernel_length, kernel_width), dtype=np.float64) / (
        kernel_width * kernel_length
    )
    output_scipy = convolve2d(input_data, kernel2d, mode="same")

    # filter data with filter_data.py. Create 1d kernels
    kernel_row = np.ones([kernel_length, 1], dtype=np.float64) / kernel_length
    kernel_col = kernel_row.transpose()
    lines_per_block = 40

    # Filter
    output_path = "filtered_output.tiff"

    # Translate input file to Tiff using gdal
    ds = gdal.Open(input_path)
    gdal.Translate("warped_winnipeg_slc.tiff", ds, format="GTiff")
    ds = None

    filter_data(
        "warped_winnipeg_slc.tiff", lines_per_block, kernel_row, kernel_col, output_path
    )
    ds = gdal.Open(output_path, gdal.GA_ReadOnly)
    output_isce3 = ds.GetRasterBand(1).ReadAsArray()
    ds = None

    # Perform assertion on amplitude and phase difference
    diff_amp = np.abs(output_scipy) - np.abs(output_isce3)
    diff_pha = np.angle(output_scipy * np.conj(output_isce3))

    assert diff_amp.max() < 1e-5
    assert diff_pha.max() < 1e-5


def test_filter_data_h5():
    """
    Test stand-alone usage of filter_data.py on winnipeg.h5
    """

    # Path to data to filter
    data_path = os.path.join(iscetest.data, "winnipeg.h5")

    # kernel size along length and width
    kernel_length = 9
    kernel_width = 9

    # Extract HH SLCs and save it in array
    ds_path = "science/LSAR/SLC/swaths/frequencyA/HH"
    with h5py.File(data_path, "r") as h:
        input_data = h[ds_path][()]

    # Filter using scipy.signal.convolve2d. Create 2D kernel
    kernel2d = np.ones((kernel_length, kernel_width), dtype=np.float64) / (
        kernel_width * kernel_length
    )
    output_scipy = convolve2d(input_data, kernel2d, mode="same")

    # filter data with filter_data.py. Create 1d kernels
    kernel_row = np.ones([kernel_length, 1], dtype=np.float64) / kernel_length
    kernel_col = kernel_row.transpose()
    lines_per_block = 40

    # Filter
    with h5py.File(data_path, "r") as h_in, h5py.File("filtered_slc.h5", "a") as h_out:
        ds_in = h_in[ds_path]
        if "filtered_slc" not in h_out.keys():
            ds_out = h_out.create_dataset("filtered_slc", data=ds_in[()])
        else:
            ds_out = h_out["filtered_slc"]
        filter_data(ds_in, lines_per_block, kernel_row, kernel_col, ds_out)
        output_isce3 = h_out["filtered_slc"][()]

    # Perform assertion on amplitude and phase difference
    diff_amp = np.abs(output_scipy) - np.abs(output_isce3)
    diff_pha = np.angle(output_scipy * np.conj(output_isce3))

    assert diff_amp.max() < 1e-5
    assert diff_pha.max() < 1e-5


if __name__ == "__main__":
    test_filter_interferogram_run()
    test_filter_interferogram_validate()
    test_filter_data_gdal()
    test_filter_data_h5()
