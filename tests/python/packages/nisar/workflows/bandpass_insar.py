import argparse
import os

import h5py
import iscetest
import numpy as np
import numpy.testing as npt
from nisar.workflows import bandpass_insar, h5_prep, insar
from nisar.workflows.insar_runconfig import InsarRunConfig
from nisar.workflows.persistence import Persistence


def test_bandpass_run():
    """
    Check if bandpass_insar runs without crashing.
    """
    # load yaml file
    test_yaml = os.path.join(iscetest.data, "bandpass_test.yaml")
    with open(test_yaml) as fh_test_yaml:
        test_yaml = (
            fh_test_yaml.read()
            .replace("@ISCETEST@", iscetest.data)
            .replace("@TEST_OUTPUT@", "rifg_bandpass.h5")
            .replace("@TEST_PRODUCT_TYPES@", "RIFG")
        )

    # Create CLI input namespace with yaml text instead of filepath
    args = argparse.Namespace(run_config_path=test_yaml, log_file=False)

    # Initialize runconfig object
    runconfig = InsarRunConfig(args)
    runconfig.geocode_common_arg_load()

    h5_prep.run(runconfig.cfg)

    # insar.run(runconfig.cfg)
    out_paths = h5_prep.run(runconfig.cfg)

    persist = Persistence(restart=True)
    persist.run_steps["dense_offsets"] = False
    insar.run(runconfig.cfg, out_paths, persist.run_steps)


def test_bandpass_validate():
    """
    Validate products generated by bandpass workflow.
    """
    scratch_path = "."

    group_path = "/science/LSAR/RIFG/swaths/frequencyA/interferogram/HH"
    with h5py.File(os.path.join(scratch_path, "rifg_bandpass.h5"), "r") as h_rifg:

        # check if phase of generated interferogram is sufficiently close to 0.
        igram = h_rifg[f"{group_path}/wrappedInterferogram"][()]
        npt.assert_allclose(np.nanmean(np.angle(igram)), 0, atol=1e-2)


if __name__ == "__main__":
    test_bandpass_run()
    test_bandpass_validate()
