import argparse
import os

import h5py
import iscetest
import numpy as np
import numpy.testing as npt
from nisar.workflows import h5_prep, rubbersheet
from nisar.workflows.rubbersheet_runconfig import RubbersheetRunConfig


def test_run_rubbersheet():
    """
    Check if rubbersheet runs without crashing
    """
    # Load yaml file
    test_yaml = os.path.join(iscetest.data, "insar_test.yaml")
    with open(test_yaml) as fh_test_yaml:
        test_yaml = (
            fh_test_yaml.read()
            .replace("@ISCETEST@", iscetest.data)
            .replace("@TEST_OUTPUT@", "rifg.h5")
            .replace("@TEST_PRODUCT_TYPES@", "RIFG")
        )

    # Create CLI input namespace with yaml text instead of filepath
    args = argparse.Namespace(run_config_path=test_yaml, log_file=False)

    # Initialize rubbersheet runconfig object
    runconfig = RubbersheetRunConfig(args)
    runconfig.geocode_common_arg_load()

    # Prepare output HDF5 products
    h5_prep.run(runconfig.cfg)

    # Run rubbersheet
    rubbersheet.run(runconfig.cfg)


def test_validate_rubbersheet():
    """
    Validate culled offsets generated by rubbersheet
    """
    scratch_path = "."
    group_path = "/science/LSAR/RIFG/swaths/frequencyA/pixelOffsets/HH"

    with h5py.File(os.path.join(scratch_path, "rifg.h5"), "r") as h_rifg:
        # Check that rubbersheeted offsets are close to zero
        # (note, we are cross-correlating an image with itself,
        #  the culled offsets should therefore be zero)
        datasets = ["alongTrackOffset", "slantRangeOffset"]

        for data in datasets:
            product_path = os.path.join(group_path, data)
            offset = h_rifg[product_path][()]
            npt.assert_allclose(np.abs(offset), 0, atol=1e-6)


if __name__ == "__main__":
    test_run_rubbersheet()
    test_validate_rubbersheet()
