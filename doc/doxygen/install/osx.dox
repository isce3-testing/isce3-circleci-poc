/*! \page install_osx Installing ISCE on macOS (OS X) with Macports

\tableofcontents

ISCE has the following dependencies
<ol>
<li> C++ compiler - gcc-6/ clang-6.0 or above
<li> Python 3.6 or above
<li> Numpy
<li> GDAL 2.3 or above with Python bindings
<li> HDF5 1.10.2 or above with h5py
<li> CMake 3.18 or above
<li> ruamel yaml for python3.7
</ol>

One can use any of the three package managers - Macports, Homebrew or Conda to install ISCE on macOS. <br>
We will only walk through the installation steps using Macports. It is highly recommend to not mix <br>
packages installed by different package managers as this typically leads to library incompatibility issues.

\section osxpack Installing packages using Macports

We write the instructions assuming that we are using clang-8.0 and python37.<br>
Changes these to appropriate version numbers for your installation. <br>
If you decide to use gcc (say gcc7) on your mac - note that you may have to make additional changes <br>
to your macports commands to force it to use libstdc++ instead of libc++.

We present instructions with clang here to ensure compatibility with most binaries that are distributed for osx.

<ol>
<li>sudo port install clang-8.0
<ul>
<li>sudo port select clang mp-clang-8.0
<li>Restart terminal after this.
</ul>

<li>sudo port install python37
<ul>
<li>sudo port select python3 python37
<li>sudo ln -s /opt/local/Library/Frameworks/Python.framework/Versions/3.7/include/python3.7m /opt/local/include/python3.7m
<li>The link command is to keep the paths simpler for use with installing software from source.
</ul>
<li>sudo port install cmake gawk coreutils gsed
<li>sudo port install wget +ssl
<li>sudo port install fftw-3
<li>sudo port install fftw-3-single
<li>sudo port install hdf5
<li>sudo port install py37-numpy
<li>sudo port install py37-scipy
<li>sudo port install py37-pytest
<li>sudo port install py37-h5py
<li>sudo port install proj
<li>sudo port install gdal +curl +expat +geos +hdf5 +openjpeg
<ul>
<li>export GDAL_DATA=/opt/local/share/gdal
<li>You may want to build a more complete version of GDAL with support for more formats. <br>
The recommended options list is : +hdf4 +hdf5 +netcdf +openjpeg +postgresql10 . <br>
If you plan to use gcc instead of clang, use gcc7 whenever the option is available to build those ports.
</ul>
<li>sudo port install py37-gdal
<li>sudo port install py37-ruamel-yaml
</ol>


\section isce3osx Install ISCE3 from source

In this section we will walk through the directory setup and build system instructions <br>
for installing ISCE. ISCE can be built with 2 different build systems
<ol>
<li> <a href="https://github.com/aivazis/config">mm</a>
<li> <a href="https://cmake.org/">cmake</a>
</ol>

In this set of instructions, we focus on cmake as it is already available via <br>
standard package managers. <br>
We assume the following directory structure in this tutorial

<table>
    <caption id="isce_dir">Assumed directory structure for installing ISCE</caption>
    <tr><th>Location<th>Description
    <tr><td>${ISCEHOME}/tools/isce/src <td> git checkout location/ unpacked tarball location of ISCE source
    <tr><td>${ISCEHOME}/tools/isce/build <td> cmake build location
    <tr><td>${ISCEHOME}/tools/isce/install <td>cmake install location
</table>

Note that ${ISCEHOME} can point to any directory on your machine.

\subsection osxtargit Step 1: Get latest version of ISCE source

\subsubsection osxgit  Option 1: Checkout latest version from git

<ol>
<li> Ensure that you are in the source folder
\code{.sh}
> cd ${ISCEHOME}/tools/isce/src
\endcode
<li> Check out the latest version of the source code from git
\code{.sh}
> git clone https://github-fn.jpl.nasa.gov/iscce-3/isce
\endcode
<li> Ensure you are building the branch that you want to use. For example, if you want to build the <b>develop</b> branch
\code{.sh}
> git checkout develop
\endcode
</ol>


\subsubsection osxtar Option 2: Get the latest tarball

<ol>
<li> Ensure that you are in the source folder
\code{.sh}
> cd ${ISCEHOME}/tools/isce/src
\endcode
<li> Unpack the tarball.
\code{.sh}
> tar xjbf isce.tar.bz2
\endcode
</ol>


\subsection osxbuild Step 2: Build the software

<ol>
<li> Ensure that you are in the build folder
\code{.sh}
> cd ${ISCEHOME}/tools/isce/build
\endcode

<li> Run cmake with the correct inputs
\code{.sh}

> CC=clang CXX=clang++ cmake -DCMAKE_FIND_FRAMEWORK=NEVER -DCMAKE_INSTALL_PREFIX=${ISCEHOME}/tools/isce/install ${ISCEHOME}/tools/isce/src/isce

\endcode

Other optional arguments can be added to the cmake line
<table>
    <caption id="cmake_flags">Additional cmake options</caption>
    <tr><th>Option<th>Description
    <tr><td rowspan="3">-DMEMORY_CHECK_COMMAND=PATH_TO_VALGRIND_EXECUTABLE -DMEMORYCHECK_COMMAND_OPTIONS="--trace-children=yes --leak-check=full --dsymutil=yes --track-origins=yes" -DCMAKE_BUILD_TYPE=Debug<td>
    <tr><td>Run tests with "-T memcheck" to check for memory leaks.
    <tr><td>valgrind needs to be installed.
    <tr><td>-DCMAKE_BUILD_TYPE=RelWithDebInfo<td>Build with optimization flags with release. Default is to build in debug mode
</table>

<li> Build the software
\code{.sh}
> make VERBOSE=ON
\endcode

<li> Run the unittests to ensure that software was built correctly
\code{.sh}
> ctest
\endcode
</ol>

\subsection osxinstall Step 3: Install and set environment variables

<ol>
<li> Ensure that you are in the build folder
\code{.sh}
> cd ${ISCEHOME}/tools/isce/build
\endcode

<li> Install the software
\code{.sh}
> make install
\endcode

<li> Setup the environment variables. Note that these need to be done in addition to the settings needed for pyre.

<table>
    <caption id="env_vars_osx">Environment variables to set after installing ISCE</caption>
    <tr><th>Variable<th>Setting<th>Description
    <tr><td>PATH<td>$PATH:${ISCEHOME}/tools/isce/install/bin<td>For executables installed by ISCE
    <tr><td>PYTHONPATH<td>$PYTHONPATH:${ISCEHOME}/tools/isce/install/packages<td>ISCE python package
    <tr><td>LD_LIBRARY_PATH<td>$LD_LIBRARY_PATH:${ISCEHOME}/tools/isce/install/lib<td>Shared libraries built by ISCE
</table>

</ol>
*/
