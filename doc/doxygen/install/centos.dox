/*! \page install_linux Installing ISCE3 on Linux

\tableofcontents

ISCE3 has the following dependencies
<ol>
<li> C++ compiler - GCC 7.5 or above
<li> Python 3.6 or above
<li> Eigen 3.3.7 or above
<li> Numpy
<li> GDAL 2.3 or above with Python bindings
<li> HDF5 1.10.2 or above with h5py
<li> CMake 3.18 or above
<li> CUDA 9.0 or above (for GPU-based processing)
<li> ruamel.yaml
</ol>

Optional dependencies for unit testing and documentation generation are
<ol>
<li> pytest (for Python unit tests)
<li> sphinx (for documenting Python code)
<li> doxygen (for documenting C++ code)
</ol>

Note that some of our prerequisites are more recent than those provided by
stable releases of common Linux distributions such as CentOS and Ubuntu.
As such, we typically prefer to install these dependencies using the
<a href="https://docs.conda.io/projects/conda/en/latest/">
conda package manager</a>, as it happens to provide suitable versions of all
the packages we need.

A simple strategy for directory layouts which will be used here is as follows:

<table>
<caption id="directory_structure">Assumed directory structure for installation</caption>
<tr><th>Path<th>Description
<tr><td>${ISCEHOME}/conda <td>Miniconda3 installation directory
<tr><td>${ISCEHOME}/isce3 <td>git checkout location
<tr><td>${ISCEHOME}/isce3/build <td>CMake build directory
<tr><td>${ISCEHOME}/isce3/build/install <td>CMake install prefix
</table>

Note that ${ISCEHOME} in these can be any directory on your machine.
You can even use your home folder as the base for your directory structure.

\section linuxpack Installing packages using builtin package manager

If you have access to a system with an Nvidia GPU which does not have the
CUDA Toolkit installed, consider asking your system administrator to install
it so that you can benefit from ISCE3's enhanced GPU processing capabilities.

If you would like to install the CUDA Toolkit on your own system, check for
available CUDA packages from your Linux distribution's package manager or refer
to the <a href=
"https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html">
CUDA Installation Guide</a>.

\section conda Installing Conda and Python packages

In this set of instructions, we rely on
<a href="https://docs.conda.io/projects/conda/en/latest/">
the conda package manager</a> for installing Python dependencies.
Downloads and installation instructions can be found
<a href="https://docs.conda.io/en/latest/miniconda.html">here</a>.

<ol>
<li> First, create a list of all the required packages in a text file called "requirements.txt" located under ${ISCEHOME}/python. <br>
The contents of the requirements.txt file is shown below:

\include tools/imagesets/centos7conda/runtime/requirements.txt.main.runtime
\include tools/imagesets/centos7conda/dev/requirements.txt.main.dev
\include tools/imagesets/centos7conda/runtime/requirements.txt.forge.runtime
\include tools/imagesets/centos7conda/dev/requirements.txt.forge.dev

<li> We can then install these requirements as shown below:
\code{.sh}
> conda update --all
  conda create -n ISCE3 -y
  conda activate ISCE3
  conda install -c conda-forge --file ${ISCEHOME}/python/requirements.txt
\endcode


\section isce3linux Install ISCE3 from source

In this section we will walk through the directory setup and build system
instructions for building and installing ISCE3 with CMake.

\subsection isce3git Step 1: Get latest version of ISCE3 source

<ol>
<li> Ensure that you are in the source folder
\code{.sh}
> cd ${ISCEHOME}/
\endcode
<li> Check out the latest version of the source code from git
\code{.sh}
> git clone https://github-fn.jpl.nasa.gov/isce-3/isce isce3
\endcode
</ol>


\subsection isce3build Step 2: Build the software

<ol>
<li> For our CMake build, we follow the practice of building outside of the source parent directory.<br>
To that end, we first create a temporary build directory:
\code{.sh}
> cd ${ISCEHOME}/isce3
> mkdir build
> cd build
\endcode

Note: if you wish to build the CUDA extensions and CMake does not find
your CUDA compiler, you can specify its location via
\code{.sh}
export CUDACXX=/usr/local/cuda/bin/nvcc
\endcode

<li> Run CMake configuration with the correct inputs and compiler flags
\code{.sh}

> cmake .. \
    -DCMAKE_CUDA_HOST_COMPILER=$CXX \
    -DCMAKE_PREFIX_PATH=$CONDA_PREFIX \
    -DCMAKE_INSTALL_PREFIX=install

\endcode

We leave it to the user to determine which GCC to assign to
`-DCMAKE_CUDA_HOST_COMPILER`. Please refer to the System Requirements section
of the  Installation Guide Linux in your version of CUDA's
[Online Documentation](https://developer.nvidia.com/cuda-toolkit-archive).

Other optional arguments can be added to the CMake line
<table>
    <caption id="cmake_options">Additional cmake options</caption>
    <tr><th>Option <th>Description
    <tr><td>-DWITH_CUDA=OFF<td>Do not attempt to detect CUDA support
                               (default "Auto" will auto-detect CUDA toolchain,
                                but can be explicitly required/ignored with ON/OFF)
    <tr><td>-DPython_EXECUTABLE=<path_to_python_exe><td>Specify this if CMake detects
    the wrong python installation
    <tr><td>-DCMAKE_BUILD_TYPE=Debug<td>Build with minimal optimization and full debugging info.
    Default is RelWithDebInfo - a balanced combination of debugging and optimization.
</table>

The following env variables can also be used as hints for CMake's auto-detection.
Use these settings if cmake fails to identify the right compilers or install locations of dependencies.
Note that if you previously ran CMake and want to change these values, the old values have been cached,
so you need to delete CMakeCache.txt from the build dir so they are recomputed.
<table>
    <caption id="cmake_env_options">Additional environment variables impacting cmake</caption>
    <tr><th>Variable<th>Description
    <tr><td>CC <td>Path to the C compiler
    <tr><td>CXX <td>Path to the C++ compiler
    <tr><td>GDAL_ROOT <td> Path to location of gdal installation. With anaconda, $CONDA_PREFIX
</table>

<li> Build the software
\code{.sh}
> make VERBOSE=ON
\endcode

<li> Install the software to your specified CMAKE_INSTALL_PREFIX
\code{.sh}
> make install
\endcode

<li> Run the unit tests to ensure that software was built and installed correctly

Note that our python packages must be installed before they can be tested.
\code{.sh}
> ctest
\endcode
</ol>

\subsection isce3install Step 3: Install and set environment variables

If you're developing ISCE3 as a regular user and installing to a non-system
CMAKE_INSTALL_PREFIX, you will need to define the following environment
variables to be able to use the libraries and python packages.

<ol>
<li> Setup the environment variables.
<table>
    <caption id="env_vars">Environment variables to set after installing ISCE3</caption>
    <tr><th>Variable<th>Setting<th>Description
    <tr><td>PATH<td>$PATH:${ISCEHOME}/isce3/build/install/bin<td>For executables installed by ISCE3
    <tr><td>PYTHONPATH<td>$PYTHONPATH:${ISCEHOME}/isce3/build/install/packages<td>ISCE3 python package
    <tr><td>LD_LIBRARY_PATH<td>$LD_LIBRARY_PATH:${ISCEHOME}/isce3/build/install/lib:${ISCEHOME}/isce3/build/install/lib64<td>Shared libraries built by ISCE3
</table>

</ol>

*/
