// -*- C++ -*-
// -*- coding: utf-8 -*-
//
// Author: Heresh Fattahi
// Copyright 2018-
//

#if !defined(ISCE_SIGNAL_SIGNAL_ICC)
#error "Signal.icc is an implementation detail of Signal"
#endif


/** @param[in] N the actual length of a signal
*   @param[in] fftLength next power of two
*/
template <class T>
void
isce3::signal::Signal<T>::
nextPowerOfTwo(size_t N, size_t &fftLength)
{
    for (size_t i = 0; i < 17; ++i) {
        fftLength = std::pow(2, i);
        if (fftLength >= N) {
            break;
        }
    }
}

/** @param[in] ncolumns number of columns
*   @param[in] nrows number of rows
*/
template <class T>
void
isce3::signal::Signal<T>::
_fwd_configureRangeFFT(int ncolumns, int nrows)
{
    _fwd_rank = 1;
    _fwd_n = new int[1];
    _fwd_n[0] = ncolumns;

    _fwd_howmany = nrows;

    _fwd_inembed = new int[1];
    _fwd_inembed[0] = ncolumns;

    _fwd_istride = 1;
    _fwd_idist = ncolumns;

    _fwd_onembed = new int[1];
    _fwd_onembed[0] = ncolumns;

    _fwd_ostride = 1;
    _fwd_odist = ncolumns;
}

/** @param[in] ncolumns number of columns
*   @param[in] nrows number of rows
*/
template <class T>
void
isce3::signal::Signal<T>::
_rev_configureRangeFFT(int ncolumns, int nrows)
{
    _rev_rank = 1;
    _rev_n = new int[1];
    _rev_n[0] = ncolumns;

    _rev_howmany = nrows;

    _rev_inembed = new int[1];
    _rev_inembed[0] = ncolumns;

    _rev_istride = 1;
    _rev_idist = ncolumns;

    _rev_onembed = new int[1];
    _rev_onembed[0] = ncolumns;

    _rev_ostride = 1;
    _rev_odist = ncolumns;
}




/** @param[in] ncolumns number of columns
*   @param[in] nrows number of rows
*/
template <class T>
void
isce3::signal::Signal<T>::
_fwd_configureAzimuthFFT(int ncolumns, int nrows)
{
    _fwd_rank = 1;
    _fwd_n = new int[1];
    _fwd_n[0] = nrows;

    _fwd_howmany = ncolumns;

    _fwd_inembed = new int[1];
    _fwd_inembed[0] = nrows;

    _fwd_istride = ncolumns;
    _fwd_idist = 1;

    _fwd_onembed = new int[1];
    _fwd_onembed[0] = nrows;

    _fwd_ostride = ncolumns;
    _fwd_odist = 1;
}


/** @param[in] ncolumns number of columns
*   @param[in] nrows number of rows
*/
template <class T>
void
isce3::signal::Signal<T>::
_rev_configureAzimuthFFT(int ncolumns, int nrows)
{
    _rev_rank = 1;
    _rev_n = new int[1];
    _rev_n[0] = nrows;

    _rev_howmany = ncolumns;

    _rev_inembed = new int[1];
    _rev_inembed[0] = nrows;

    _rev_istride = ncolumns;
    _rev_idist = 1;

    _rev_onembed = new int[1];
    _rev_onembed[0] = nrows;

    _rev_ostride = ncolumns;
    _rev_odist = 1;
}


/** @param[in] incolumns number of columns
*   @param[in] inrows number of rows
*   @param[in] oncolumns number of columns in output container
*   @param[in] onrows number of rows in output container
*/
template <class T>
void
isce3::signal::Signal<T>::
_fwd_configure2DFFT(int incolumns, int inrows,
                    int oncolumns, int onrows)
{
    _fwd_rank = 2;
    _fwd_n = new int[2];
    _fwd_n[0] = inrows;
    _fwd_n[1] = incolumns;

    _fwd_howmany = 1;

    _fwd_inembed = new int[2];
    _fwd_inembed[0] = inrows;
    _fwd_inembed[1] = incolumns;

    _fwd_istride = 1;
    _fwd_idist = 0;

    _fwd_onembed = new int[2];
    _fwd_onembed[0] = onrows;
    _fwd_onembed[1] = oncolumns;

    _fwd_ostride = 1;
    _fwd_odist = 0;
}


/** @param[in] ncolumns number of columns
*   @param[in] nrows number of rows
*/
template <class T>
void
isce3::signal::Signal<T>::
_rev_configure2DFFT(int ncolumns, int nrows)
{
    _rev_rank = 2;
    _rev_n = new int[2];
    _rev_n[0] = nrows;
    _rev_n[1] = ncolumns;

    _rev_howmany = 1;

    _rev_inembed = new int[2];
    _rev_inembed[0] = nrows;
    _rev_inembed[1] = ncolumns;

    _rev_istride = 1;
    _rev_idist = 0;

    _rev_onembed = new int[2];
    _rev_onembed[0] = nrows;
    _rev_onembed[1] = ncolumns;

    _rev_ostride = 1;
    _rev_odist = 0;
}



/** @param[in] rank dataset number of dimensions
*   @param[in] n size of each dimension (array)
*   @param[in] howmany number of forward FFT
*   @param[in] inembed layout of the input container
*   @param[in] istride packing of the input data
*   @param[in] idist number of elements between two input dataset
*   @param[in] onembed layout of the output container
*   @param[in] ostride packing of the output data
*   @param[in] odist number of elements between two output dataset
*/
template <class T>
void
isce3::signal::Signal<T>::
_fwd_configure(int rank, int* n, int howmany,
           int* inembed, int istride, int idist,
           int* onembed, int ostride, int odist)
{
    _fwd_rank = rank;
    _fwd_n = new int[rank];
    for (int i=0; i<rank;i++)
        _fwd_n[i] = n[i];

    _fwd_howmany = howmany;

    if (inembed) {
        _fwd_inembed = new int[rank];
        for (int i=0; i<rank;i++)
            _fwd_inembed[i] = inembed[i];
    }
    else {
        _fwd_inembed = nullptr;
    }

    _fwd_istride = istride;
    _fwd_idist = idist;

    if (onembed) {
        _fwd_onembed = new int[rank];
        for (int i=0; i<rank;i++)
            _fwd_onembed[i] = onembed[i];
    }
    else {
        _fwd_onembed = nullptr;
    }

    _fwd_ostride = ostride;
    _fwd_odist = odist;
}


/** @param[in] rank dataset number of dimensions
*   @param[in] n size of each dimension (array)
*   @param[in] howmany number of forward FFT
*   @param[in] inembed layout of the input container
*   @param[in] istride packing of the input data
*   @param[in] idist number of elements between two input dataset
*   @param[in] onembed layout of the output container
*   @param[in] ostride packing of the output data
*   @param[in] odist number of elements between two output dataset
*/
template <class T>
void
isce3::signal::Signal<T>::
_rev_configure(int rank, int* n, int howmany,
           int* inembed, int istride, int idist,
           int* onembed, int ostride, int odist)
{
    _rev_rank = rank;
    _rev_n = new int[rank];
    for (int i=0; i<rank;i++)
        _rev_n[i] = n[i];

    _rev_howmany = howmany;

    if (inembed) {
        _rev_inembed = new int[rank];
        for (int i=0; i<rank;i++)
            _rev_inembed[i] = inembed[i];
    }
    else {
        _rev_inembed = nullptr;
    }

    _rev_istride = istride;
    _rev_idist = idist;

    if (onembed) {
        _rev_onembed = new int[rank];
        for (int i=0; i<rank;i++)
            _rev_onembed[i] = onembed[i];
        }
    else {
        _rev_onembed = nullptr;
    }

    _rev_ostride = ostride;
    _rev_odist = odist;
}
