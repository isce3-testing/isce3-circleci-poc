runconfig:
    name: str()

    groups:
        PGENameGroup:
            PGEName: enum('GSLC_L_PGE')

        InputFileGroup:
            # REQUIRED - One NISAR L1B RSLC formatted HDF5 file
            InputFilePath: list(str(), min=1, max=1)

        DynamicAncillaryFileGroup:
            # Digital elevation model
            DEMFile: str()

        ProductPathGroup:
            # Directory where PGE will place results
            ProductPath: str()
            # Product Counter
            ProductCounter: int(min=1, max=999, required=False)

            # Directory where SAS can write temporary data
            ScratchPath: str()

            # Intermediate file name.  SAS writes output product to the following file.
            # After the SAS completes, the PGE wrapper renames the product file
            # according to proper file naming conventions.
            SASOutputFile: str()

        PrimaryExecutable:
            ProductType: enum('GSLC')
            CompositeReleaseID: regex(r'\w\d\d\d\d\d', name='CRID', required=False)
            ProcessingType: enum('PR', 'UR', required=False)
            ProductAccuracy: enum('P', 'M', 'N', 'F', 'T', required=False)

        DebugLevelGroup:
            DebugSwitch: bool()

        #adt section - isce3 + pyre workflow
        processing:
            # Mechanism to select frequencies and polarizations
            input_subset:
                # List of frequencies to process. Default empty representing all
                list_of_frequencies:
                    # List of polarization channels to process. Default empty representing all
                    A: any(list(str(min=2, max=2), min=1, max=4), str(min=2, max=2), null(), required=False)
                    B: any(list(str(min=2, max=2), min=1, max=4), str(min=2, max=2), null(), required=False)

            # DEM download options: checked only if internet access is available
            dem_download: include('dem_download_options', required=False)

            # Pre-processing (before geocoding) options
            pre_process: include('pre_process_options', required=False)

            # Mechanism to specify output posting and DEM
            geocode: include('geocode_options', required=False)

            # Radar grids cube options
            radar_grid_cubes:  include('radar_grid_cubes_options', required=False)

            # Geo2rdr options
            geo2rdr: include('geo2rdr_options', required=False)

            blocksize:
                y: int(min=100, max=10000)

            dem_margin: num(required=False)

            flatten: bool()

        # Worker options (e.g. enable/disable GPU processing, select GPU device ID)
        worker: include('worker_options', required=False)

        # Quality Assurance software options
        QA: include('qa_options', required=False)

        # Logging options. If path to log file is not set, log is sent to screen
        logging: include('logging_options', required=False)

---
radar_grid_cubes_options:

    # List of heights in meters
    heights: list(num(), required=False)

    # Same as input DEM if not provided.
    outputEPSG: int(min=1024, max=32767, required=False)

    # Output posting in same units as output EPSG.
    # If not provided, spacing values will be taken from provided DEM.
    output_posting:
        x_posting: num(min=0, required=False)
        y_posting: num(min=0, required=False)

    # To control output grid in same units as output EPSG
    x_snap: num(min=0, required=False)

    # To control output grid in same units as output EPSG
    y_snap: num(min=0, required=False)

    top_left:
        # Set top-left y in same units as output EPSG
        y_abs: num(required=False)

        # Set top-left x in same units as output EPSG
        x_abs: num(required=False)

    bottom_right:
        # Set bottom-right y in same units as output EPSG
        y_abs: num(required=False)

        # Set bottom-right x in same units as output EPSG
        x_abs: num(required=False)


geo2rdr_options:
    # Convergence threshold for geo2rdr algorithm
    threshold: num(min=1.0e-9, max=1.0e-3, required=False)

    # Maximum number of iteration for geo2rdr algorithm
    maxiter: int(min=10, max=50, required=False)

logging_options:
    # Path to where to store log file
    path: str()

    # Log file write mode. 'a' for append to existing. 'w' for new or overwrite existing.
    write_mode: enum('a', 'w', required=False)

qa_options:
    # Enable/Disable file format validation
    validate: bool(required=False)

    # Produce a data summary
    quality: bool(required=False)

dem_download_options:
    # s3 bucket / curl URL / local file
    source: str(required=False)

    top_left:
        # Set top-left X coordinate
        x: num(required=False)

        # Set top-left Y coordinate
        y: num(required=False)

    bottom_right:
        # Set bottom-right X coordinate
        x: num(required=False)

        # Set bottom-right Y coordinate
        y: num(required=False)

pre_process_options:
    filter:
        A:
            type: str(required=False)
            parameters: str(required=False)
        B:
            type: str(required=False)
            parameters: str(required=False)

geocode_options:
    # Same as input DEM if not provided.
    outputEPSG: int(min=1024, max=32767, required=False)

    # Output posting in same units as output EPSG.
    # If not provided, spacing values will be taken from provided DEM.
    output_posting:
        A:
            x_posting: num(min=0, required=False)
            y_posting: num(min=0, required=False)
        B:
            x_posting: num(min=0, required=False)
            y_posting: num(min=0, required=False)

    # To control output grid in same units as output EPSG
    x_snap: num(min=0, required=False)

    # To control output grid in same units as output EPSG
    y_snap: num(min=0, required=False)

    top_left:
        # Set top-left y in same units as output EPSG
        y_abs: num(required=False)

        # Set top-left x in same units as output EPSG
        x_abs: num(required=False)

    bottom_right:
        # Set bottom-right y in same units as output EPSG
        y_abs: num(required=False)

        # Set bottom-right x in same units as output EPSG
        x_abs: num(required=False)

worker_options:
    # To prevent downloading DEM / other data automatically. Default True
    internet_access: bool(required=False)

    # Enable/Disable GPU processing capabilities. Default False
    gpu_enabled: bool(required=False)

    # Index of the GPU to use for processing, optional. Defaults to the
    # first available CUDA device. Ignored if *gpu_enabled* is False.
    gpu_id: int(min=0, required=False)
